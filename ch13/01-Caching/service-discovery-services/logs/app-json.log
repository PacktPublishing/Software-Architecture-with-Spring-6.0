{"timestamp":"2024-10-05T16:16:28.296-03:00","logger":"com.packtpub.servicediscoveryservices.ServiceDiscoveryServicesApplication","thread":"main","message":"Starting ServiceDiscoveryServicesApplication using Java 21.0.3 with PID 6327 (/Users/wanderson/01-Professional/01-Author/01-Books/Software-Architecture-with-Spring-6.0/ch11/service-discovery-services/target/classes started by wanderson in /Users/wanderson/01-Professional/01-Author/01-Books/Software-Architecture-with-Spring-6.0/ch11/service-discovery-services)"}
{"timestamp":"2024-10-05T16:16:28.300-03:00","logger":"com.packtpub.servicediscoveryservices.ServiceDiscoveryServicesApplication","thread":"main","message":"No active profile set, falling back to 1 default profile: \"default\""}
{"timestamp":"2024-10-05T16:16:28.774-03:00","logger":"org.springframework.cloud.context.scope.GenericScope","thread":"main","message":"BeanFactory id=074995e5-237c-3504-8d4d-d67bd2868e97"}
{"timestamp":"2024-10-05T16:16:28.804-03:00","logger":"org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker","thread":"main","message":"Bean 'org.springframework.cloud.client.loadbalancer.LoadBalancerAutoConfiguration$DeferringLoadBalancerInterceptorConfig' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerAutoConfiguration$DeferringLoadBalancerInterceptorConfig] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [lbRestClientPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead."}
{"timestamp":"2024-10-05T16:16:28.808-03:00","logger":"org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker","thread":"main","message":"Bean 'deferringLoadBalancerInterceptor' of type [org.springframework.cloud.client.loadbalancer.DeferringLoadBalancerInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [lbRestClientPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies."}
{"timestamp":"2024-10-05T16:16:28.947-03:00","logger":"org.springframework.boot.web.embedded.tomcat.TomcatWebServer","thread":"main","message":"Tomcat initialized with port 8761 (http)"}
{"timestamp":"2024-10-05T16:16:28.952-03:00","logger":"org.apache.coyote.http11.Http11NioProtocol","thread":"main","message":"Initializing ProtocolHandler [\"http-nio-8761\"]"}
{"timestamp":"2024-10-05T16:16:28.953-03:00","logger":"org.apache.catalina.core.StandardService","thread":"main","message":"Starting service [Tomcat]"}
{"timestamp":"2024-10-05T16:16:28.953-03:00","logger":"org.apache.catalina.core.StandardEngine","thread":"main","message":"Starting Servlet engine: [Apache Tomcat/10.1.25]"}
{"timestamp":"2024-10-05T16:16:28.976-03:00","logger":"org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/]","thread":"main","message":"Initializing Spring embedded WebApplicationContext"}
{"timestamp":"2024-10-05T16:16:28.976-03:00","logger":"org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext","thread":"main","message":"Root WebApplicationContext: initialization completed in 659 ms"}
{"timestamp":"2024-10-05T16:16:29.873-03:00","logger":"org.springframework.cloud.loadbalancer.config.LoadBalancerCacheAutoConfiguration$LoadBalancerCaffeineWarnLogger","thread":"main","message":"Spring Cloud LoadBalancer is currently working with the default cache. While this cache implementation is useful for development and tests, it's recommended to use Caffeine cache in production.You can switch to using Caffeine cache, by adding it and org.springframework.cache.caffeine.CaffeineCacheManager to the classpath."}
{"timestamp":"2024-10-05T16:16:29.880-03:00","logger":"org.springframework.cloud.netflix.eureka.InstanceInfoFactory","thread":"main","message":"Setting initial instance status as: STARTING"}
{"timestamp":"2024-10-05T16:16:29.952-03:00","logger":"org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver","thread":"main","message":"Exposing 1 endpoint beneath base path '/actuator'"}
{"timestamp":"2024-10-05T16:16:29.983-03:00","logger":"org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry","thread":"main","message":"Registering application SERVICE-DISCOVERY-SERVICES with eureka with status UP"}
{"timestamp":"2024-10-05T16:16:29.984-03:00","logger":"org.apache.coyote.http11.Http11NioProtocol","thread":"main","message":"Starting ProtocolHandler [\"http-nio-8761\"]"}
{"timestamp":"2024-10-05T16:16:29.987-03:00","logger":"org.springframework.cloud.netflix.eureka.server.EurekaServerBootstrap","thread":"Thread-9","message":"isAws returned false"}
{"timestamp":"2024-10-05T16:16:29.988-03:00","logger":"org.springframework.cloud.netflix.eureka.server.EurekaServerBootstrap","thread":"Thread-9","message":"Initialized server context"}
{"timestamp":"2024-10-05T16:16:29.989-03:00","logger":"org.springframework.boot.web.embedded.tomcat.TomcatWebServer","thread":"main","message":"Tomcat started on port 8761 (http) with context path '/'"}
{"timestamp":"2024-10-05T16:16:29.989-03:00","logger":"org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration","thread":"main","message":"Updating port to 8761"}
{"timestamp":"2024-10-05T16:16:29.991-03:00","logger":"org.springframework.cloud.netflix.eureka.server.EurekaServerInitializerConfiguration","thread":"Thread-9","message":"Started Eureka Server"}
{"timestamp":"2024-10-05T16:16:30.000-03:00","logger":"com.packtpub.servicediscoveryservices.ServiceDiscoveryServicesApplication","thread":"main","message":"Started ServiceDiscoveryServicesApplication in 1.992 seconds (process running for 2.459)"}
{"timestamp":"2024-10-05T16:16:30.507-03:00","logger":"org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/]","thread":"RMI TCP Connection(2)-192.168.100.85","message":"Initializing Spring DispatcherServlet 'dispatcherServlet'"}
{"timestamp":"2024-10-05T16:16:30.507-03:00","logger":"org.springframework.web.servlet.DispatcherServlet","thread":"RMI TCP Connection(2)-192.168.100.85","message":"Initializing Servlet 'dispatcherServlet'"}
{"timestamp":"2024-10-05T16:16:30.508-03:00","logger":"org.springframework.web.servlet.DispatcherServlet","thread":"RMI TCP Connection(2)-192.168.100.85","message":"Completed initialization in 1 ms"}
{"timestamp":"2024-10-05T17:00:36.985-03:00","logger":"org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry","thread":"SpringApplicationShutdownHook","message":"Unregistering application SERVICE-DISCOVERY-SERVICES with eureka with status DOWN"}
{"timestamp":"2024-10-05T17:00:36.996-03:00","logger":"org.springframework.cloud.netflix.eureka.server.EurekaServerBootstrap","thread":"SpringApplicationShutdownHook","message":"Shutting down Eureka Server.."}
{"timestamp":"2024-10-05T17:00:36.999-03:00","logger":"com.netflix.servo.monitor.StatsMonitor","thread":"SpringApplicationShutdownHook","message":"Attempting to get the value for an expired monitor: eurekaServer.replication.batchSize.Will start computing stats again."}
{"timestamp":"2024-10-05T17:00:37.002-03:00","logger":"com.netflix.servo.monitor.StatsMonitor","thread":"SpringApplicationShutdownHook","message":"Attempting to get the value for an expired monitor: eurekaServer.replication.executionTime.Will start computing stats again."}
{"timestamp":"2024-10-05T17:00:37.002-03:00","logger":"com.netflix.servo.monitor.StatsMonitor","thread":"SpringApplicationShutdownHook","message":"Attempting to get the value for an expired monitor: eurekaServer.replication.executionTime.Will start computing stats again."}
{"timestamp":"2024-10-05T17:00:37.002-03:00","logger":"com.netflix.servo.monitor.StatsMonitor","thread":"SpringApplicationShutdownHook","message":"Attempting to get the value for an expired monitor: eurekaServer.replication.batchSize.Will start computing stats again."}
{"timestamp":"2024-10-05T17:00:37.006-03:00","logger":"org.springframework.cloud.netflix.eureka.server.EurekaServerBootstrap","thread":"SpringApplicationShutdownHook","message":"Eureka Service is now shutdown..."}
